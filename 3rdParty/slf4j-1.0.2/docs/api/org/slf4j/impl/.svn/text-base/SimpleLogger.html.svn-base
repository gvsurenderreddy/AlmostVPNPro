<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN""http://www.w3.org/TR/REC-html40/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc on Thu Jun 08 21:33:14 CEST 2006 -->
<TITLE>
SimpleLogger (SLF4J Version 1.0.2)
</TITLE>
<META NAME="keywords" CONTENT="org.slf4j.impl.SimpleLogger,SimpleLogger class">
<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">
</HEAD>
<SCRIPT>
function asd()
{
parent.document.title="SimpleLogger (SLF4J Version 1.0.2)";
}
</SCRIPT>
<BODY BGCOLOR="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_top"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/SimpleLogger.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
<b>SLF4J 1.0.2</b><br/></EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/slf4j/impl/NOPLoggerFactory.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/slf4j/impl/SimpleLoggerFactory.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SimpleLogger.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.slf4j.impl</FONT>
<BR>
Class SimpleLogger</H2>
<PRE>
java.lang.Object
  |
  +--<A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html">org.slf4j.impl.MarkerIgnoringBase</A>
        |
        +--<B>org.slf4j.impl.SimpleLogger</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../org/slf4j/Logger.html">Logger</A></DD>
</DL>
<HR>
<DL>
<DT>public class <B>SimpleLogger</B><DT>extends <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html">MarkerIgnoringBase</A></DL>

<P>
A simple (and direct) implementation that logs messages of level
 INFO or higher on the console (<code>System.err<code>).

 <p>The output includes the relative time in milliseconds, thread
 name, the level, logger name, and the message followed by the line
 separator for the host.  In log4j terms it amounts to the "%r [%t]
 %level %logger - %m%n" pattern. </p>

 <p>Sample output follows.</p>
<pre>
176 [main] INFO examples.Sort - Populating an array of 2 elements in reverse order.
225 [main] INFO examples.SortAlgo - Entered the sort method.
304 [main] INFO examples.SortAlgo - Dump of integer array:
317 [main] INFO examples.SortAlgo - Element [0] = 0
331 [main] INFO examples.SortAlgo - Element [1] = 1
343 [main] INFO examples.Sort - The next log statement should be an error message.
346 [main] ERROR examples.SortAlgo - Tried to dump an uninitialized array.
        at org.log4j.examples.SortAlgo.dump(SortAlgo.java:58)
        at org.log4j.examples.Sort.main(Sort.java:64)
467 [main] INFO  examples.Sort - Exiting main method.
</pre>
<P>

<P>
<DL>
<DT><B>Author:</B></DT>
  <DD>Ceki G&uuml;lc&uuml;</DD>
</DL>
<HR>

<P>
<!-- ======== NESTED CLASS SUMMARY ======== -->


<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Field Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#LINE_SEPARATOR">LINE_SEPARATOR</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->


<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=2><FONT SIZE="+2">
<B>Method Summary</B></FONT></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#debug(java.lang.String)">debug</A></B>(java.lang.String&nbsp;msg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A NOP implementation, as this logger is permanently disabled for
 the DEBUG level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#debug(java.lang.String, java.lang.Object)">debug</A></B>(java.lang.String&nbsp;format,
      java.lang.Object&nbsp;param1)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A NOP implementation, as this logger is permanently disabled for
 the DEBUG level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#debug(java.lang.String, java.lang.Object[])">debug</A></B>(java.lang.String&nbsp;format,
      java.lang.Object[]&nbsp;argArray)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log a message at the DEBUG level according to the specified format
 and arguments.
 
 </TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#debug(java.lang.String, java.lang.Object, java.lang.Object)">debug</A></B>(java.lang.String&nbsp;format,
      java.lang.Object&nbsp;param1,
      java.lang.Object&nbsp;param2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A NOP implementation, as this logger is permanently disabled for
 the DEBUG level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#debug(java.lang.String, java.lang.Throwable)">debug</A></B>(java.lang.String&nbsp;msg,
      java.lang.Throwable&nbsp;t)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A NOP implementation, as this logger is permanently disabled for
 the DEBUG level.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#error(java.lang.String)">error</A></B>(java.lang.String&nbsp;msg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A simple implementation which always logs messages of level ERROR according
 to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#error(java.lang.String, java.lang.Object)">error</A></B>(java.lang.String&nbsp;format,
      java.lang.Object&nbsp;arg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform single parameter substitution before logging the message of level
 ERROR according to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#error(java.lang.String, java.lang.Object[])">error</A></B>(java.lang.String&nbsp;format,
      java.lang.Object[]&nbsp;argArray)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform double parameter substitution before logging the message of level
 ERROR according to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#error(java.lang.String, java.lang.Object, java.lang.Object)">error</A></B>(java.lang.String&nbsp;format,
      java.lang.Object&nbsp;arg1,
      java.lang.Object&nbsp;arg2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform double parameter substitution before logging the message of level
 ERROR according to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#error(java.lang.String, java.lang.Throwable)">error</A></B>(java.lang.String&nbsp;msg,
      java.lang.Throwable&nbsp;t)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log a message of level ERROR, including an exception.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#getName()">getName</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return the name of this <code>Logger</code> instance.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#info(java.lang.String)">info</A></B>(java.lang.String&nbsp;msg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A simple implementation which always logs messages of level INFO according
 to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#info(java.lang.String, java.lang.Object)">info</A></B>(java.lang.String&nbsp;format,
     java.lang.Object&nbsp;arg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform single parameter substitution before logging the message of level
 INFO according to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#info(java.lang.String, java.lang.Object[])">info</A></B>(java.lang.String&nbsp;format,
     java.lang.Object[]&nbsp;argArray)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform double parameter substitution before logging the message of level
 INFO according to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#info(java.lang.String, java.lang.Object, java.lang.Object)">info</A></B>(java.lang.String&nbsp;format,
     java.lang.Object&nbsp;arg1,
     java.lang.Object&nbsp;arg2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform double parameter substitution before logging the message of level
 INFO according to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#info(java.lang.String, java.lang.Throwable)">info</A></B>(java.lang.String&nbsp;msg,
     java.lang.Throwable&nbsp;t)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log a message of level INFO, including an exception.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#isDebugEnabled()">isDebugEnabled</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Always returns false.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#isErrorEnabled()">isErrorEnabled</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Always returns true.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#isInfoEnabled()">isInfoEnabled</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Always returns true.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#isWarnEnabled()">isWarnEnabled</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Always returns true.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#warn(java.lang.String)">warn</A></B>(java.lang.String&nbsp;msg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A simple implementation which always logs messages of level WARN according
 to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#warn(java.lang.String, java.lang.Object)">warn</A></B>(java.lang.String&nbsp;format,
     java.lang.Object&nbsp;arg)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform single parameter substitution before logging the message of level
 WARN according to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#warn(java.lang.String, java.lang.Object[])">warn</A></B>(java.lang.String&nbsp;format,
     java.lang.Object[]&nbsp;argArray)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform double parameter substitution before logging the message of level
 WARN according to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#warn(java.lang.String, java.lang.Object, java.lang.Object)">warn</A></B>(java.lang.String&nbsp;format,
     java.lang.Object&nbsp;arg1,
     java.lang.Object&nbsp;arg2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform double parameter substitution before logging the message of level
 WARN according to the format outlined above.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/slf4j/impl/SimpleLogger.html#warn(java.lang.String, java.lang.Throwable)">warn</A></B>(java.lang.String&nbsp;msg,
     java.lang.Throwable&nbsp;t)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Log a message of level WARN, including an exception.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_org.slf4j.impl.MarkerIgnoringBase"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class org.slf4j.impl.<A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html">MarkerIgnoringBase</A></B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#debug(org.slf4j.Marker, java.lang.String)">debug</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#debug(org.slf4j.Marker, java.lang.String, java.lang.Object)">debug</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#debug(org.slf4j.Marker, java.lang.String, java.lang.Object[])">debug</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#debug(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)">debug</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#debug(org.slf4j.Marker, java.lang.String, java.lang.Throwable)">debug</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#error(org.slf4j.Marker, java.lang.String)">error</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#error(org.slf4j.Marker, java.lang.String, java.lang.Object)">error</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#error(org.slf4j.Marker, java.lang.String, java.lang.Object[])">error</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#error(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)">error</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#error(org.slf4j.Marker, java.lang.String, java.lang.Throwable)">error</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#info(org.slf4j.Marker, java.lang.String)">info</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#info(org.slf4j.Marker, java.lang.String, java.lang.Object)">info</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#info(org.slf4j.Marker, java.lang.String, java.lang.Object[])">info</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#info(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)">info</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#info(org.slf4j.Marker, java.lang.String, java.lang.Throwable)">info</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#isDebugEnabled(org.slf4j.Marker)">isDebugEnabled</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#isErrorEnabled(org.slf4j.Marker)">isErrorEnabled</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#isInfoEnabled(org.slf4j.Marker)">isInfoEnabled</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#isWarnEnabled(org.slf4j.Marker)">isWarnEnabled</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#warn(org.slf4j.Marker, java.lang.String)">warn</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#warn(org.slf4j.Marker, java.lang.String, java.lang.Object)">warn</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#warn(org.slf4j.Marker, java.lang.String, java.lang.Object[])">warn</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#warn(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)">warn</A>, <A HREF="../../../org/slf4j/impl/MarkerIgnoringBase.html#warn(org.slf4j.Marker, java.lang.String, java.lang.Throwable)">warn</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TD><B>Methods inherited from class java.lang.Object</B></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Field Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="LINE_SEPARATOR"><!-- --></A><H3>
LINE_SEPARATOR</H3>
<PRE>
public static final java.lang.String <B>LINE_SEPARATOR</B></PRE>
<DL>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->


<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" WIDTH="100%">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TD COLSPAN=1><FONT SIZE="+2">
<B>Method Detail</B></FONT></TD>
</TR>
</TABLE>

<A NAME="getName()"><!-- --></A><H3>
getName</H3>
<PRE>
public java.lang.String <B>getName</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/slf4j/Logger.html">Logger</A></CODE></B></DD>
<DD>Return the name of this <code>Logger</code> instance.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isDebugEnabled()"><!-- --></A><H3>
isDebugEnabled</H3>
<PRE>
public boolean <B>isDebugEnabled</B>()</PRE>
<DL>
<DD>Always returns false.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>always false</DL>
</DD>
</DL>
<HR>

<A NAME="debug(java.lang.String)"><!-- --></A><H3>
debug</H3>
<PRE>
public void <B>debug</B>(java.lang.String&nbsp;msg)</PRE>
<DL>
<DD>A NOP implementation, as this logger is permanently disabled for
 the DEBUG level.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - the message string to be logged</DL>
</DD>
</DL>
<HR>

<A NAME="debug(java.lang.String, java.lang.Object)"><!-- --></A><H3>
debug</H3>
<PRE>
public void <B>debug</B>(java.lang.String&nbsp;format,
                  java.lang.Object&nbsp;param1)</PRE>
<DL>
<DD>A NOP implementation, as this logger is permanently disabled for
 the DEBUG level.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>param1</CODE> - the argument</DL>
</DD>
</DL>
<HR>

<A NAME="debug(java.lang.String, java.lang.Object, java.lang.Object)"><!-- --></A><H3>
debug</H3>
<PRE>
public void <B>debug</B>(java.lang.String&nbsp;format,
                  java.lang.Object&nbsp;param1,
                  java.lang.Object&nbsp;param2)</PRE>
<DL>
<DD>A NOP implementation, as this logger is permanently disabled for
 the DEBUG level.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>param1</CODE> - the first argument<DD><CODE>param2</CODE> - the second argument</DL>
</DD>
</DL>
<HR>

<A NAME="debug(java.lang.String, java.lang.Object[])"><!-- --></A><H3>
debug</H3>
<PRE>
public void <B>debug</B>(java.lang.String&nbsp;format,
                  java.lang.Object[]&nbsp;argArray)</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../../org/slf4j/Logger.html">Logger</A></CODE></B></DD>
<DD>Log a message at the DEBUG level according to the specified format
 and arguments.
 
 <p>This form avoids superfluous object creation when the logger
 is disabled for the DEBUG level. </p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>argArray</CODE> - an array of arguments</DL>
</DD>
</DL>
<HR>

<A NAME="debug(java.lang.String, java.lang.Throwable)"><!-- --></A><H3>
debug</H3>
<PRE>
public void <B>debug</B>(java.lang.String&nbsp;msg,
                  java.lang.Throwable&nbsp;t)</PRE>
<DL>
<DD>A NOP implementation, as this logger is permanently disabled for
 the DEBUG level.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - the message accompanying the exception<DD><CODE>t</CODE> - the exception (throwable) to log</DL>
</DD>
</DL>
<HR>

<A NAME="isInfoEnabled()"><!-- --></A><H3>
isInfoEnabled</H3>
<PRE>
public boolean <B>isInfoEnabled</B>()</PRE>
<DL>
<DD>Always returns true.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>True if this Logger is enabled for the INFO level,
 false otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="info(java.lang.String)"><!-- --></A><H3>
info</H3>
<PRE>
public void <B>info</B>(java.lang.String&nbsp;msg)</PRE>
<DL>
<DD>A simple implementation which always logs messages of level INFO according
 to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - the message string to be logged</DL>
</DD>
</DL>
<HR>

<A NAME="info(java.lang.String, java.lang.Object)"><!-- --></A><H3>
info</H3>
<PRE>
public void <B>info</B>(java.lang.String&nbsp;format,
                 java.lang.Object&nbsp;arg)</PRE>
<DL>
<DD>Perform single parameter substitution before logging the message of level
 INFO according to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>arg</CODE> - the argument</DL>
</DD>
</DL>
<HR>

<A NAME="info(java.lang.String, java.lang.Object, java.lang.Object)"><!-- --></A><H3>
info</H3>
<PRE>
public void <B>info</B>(java.lang.String&nbsp;format,
                 java.lang.Object&nbsp;arg1,
                 java.lang.Object&nbsp;arg2)</PRE>
<DL>
<DD>Perform double parameter substitution before logging the message of level
 INFO according to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>arg1</CODE> - the first argument<DD><CODE>arg2</CODE> - the second argument</DL>
</DD>
</DL>
<HR>

<A NAME="info(java.lang.String, java.lang.Object[])"><!-- --></A><H3>
info</H3>
<PRE>
public void <B>info</B>(java.lang.String&nbsp;format,
                 java.lang.Object[]&nbsp;argArray)</PRE>
<DL>
<DD>Perform double parameter substitution before logging the message of level
 INFO according to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>argArray</CODE> - an array of arguments</DL>
</DD>
</DL>
<HR>

<A NAME="info(java.lang.String, java.lang.Throwable)"><!-- --></A><H3>
info</H3>
<PRE>
public void <B>info</B>(java.lang.String&nbsp;msg,
                 java.lang.Throwable&nbsp;t)</PRE>
<DL>
<DD>Log a message of level INFO, including an exception.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - the message accompanying the exception<DD><CODE>t</CODE> - the exception (throwable) to log</DL>
</DD>
</DL>
<HR>

<A NAME="isWarnEnabled()"><!-- --></A><H3>
isWarnEnabled</H3>
<PRE>
public boolean <B>isWarnEnabled</B>()</PRE>
<DL>
<DD>Always returns true.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>True if this Logger is enabled for the WARN level,
 false otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="warn(java.lang.String)"><!-- --></A><H3>
warn</H3>
<PRE>
public void <B>warn</B>(java.lang.String&nbsp;msg)</PRE>
<DL>
<DD>A simple implementation which always logs messages of level WARN according
 to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - the message string to be logged</DL>
</DD>
</DL>
<HR>

<A NAME="warn(java.lang.String, java.lang.Object)"><!-- --></A><H3>
warn</H3>
<PRE>
public void <B>warn</B>(java.lang.String&nbsp;format,
                 java.lang.Object&nbsp;arg)</PRE>
<DL>
<DD>Perform single parameter substitution before logging the message of level
 WARN according to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>arg</CODE> - the argument</DL>
</DD>
</DL>
<HR>

<A NAME="warn(java.lang.String, java.lang.Object, java.lang.Object)"><!-- --></A><H3>
warn</H3>
<PRE>
public void <B>warn</B>(java.lang.String&nbsp;format,
                 java.lang.Object&nbsp;arg1,
                 java.lang.Object&nbsp;arg2)</PRE>
<DL>
<DD>Perform double parameter substitution before logging the message of level
 WARN according to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>arg1</CODE> - the first argument<DD><CODE>arg2</CODE> - the second argument</DL>
</DD>
</DL>
<HR>

<A NAME="warn(java.lang.String, java.lang.Object[])"><!-- --></A><H3>
warn</H3>
<PRE>
public void <B>warn</B>(java.lang.String&nbsp;format,
                 java.lang.Object[]&nbsp;argArray)</PRE>
<DL>
<DD>Perform double parameter substitution before logging the message of level
 WARN according to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>argArray</CODE> - an array of arguments</DL>
</DD>
</DL>
<HR>

<A NAME="warn(java.lang.String, java.lang.Throwable)"><!-- --></A><H3>
warn</H3>
<PRE>
public void <B>warn</B>(java.lang.String&nbsp;msg,
                 java.lang.Throwable&nbsp;t)</PRE>
<DL>
<DD>Log a message of level WARN, including an exception.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - the message accompanying the exception<DD><CODE>t</CODE> - the exception (throwable) to log</DL>
</DD>
</DL>
<HR>

<A NAME="isErrorEnabled()"><!-- --></A><H3>
isErrorEnabled</H3>
<PRE>
public boolean <B>isErrorEnabled</B>()</PRE>
<DL>
<DD>Always returns true.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>True if this Logger is enabled for the ERROR level,
 false otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="error(java.lang.String)"><!-- --></A><H3>
error</H3>
<PRE>
public void <B>error</B>(java.lang.String&nbsp;msg)</PRE>
<DL>
<DD>A simple implementation which always logs messages of level ERROR according
 to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - the message string to be logged</DL>
</DD>
</DL>
<HR>

<A NAME="error(java.lang.String, java.lang.Object)"><!-- --></A><H3>
error</H3>
<PRE>
public void <B>error</B>(java.lang.String&nbsp;format,
                  java.lang.Object&nbsp;arg)</PRE>
<DL>
<DD>Perform single parameter substitution before logging the message of level
 ERROR according to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>arg</CODE> - the argument</DL>
</DD>
</DL>
<HR>

<A NAME="error(java.lang.String, java.lang.Object, java.lang.Object)"><!-- --></A><H3>
error</H3>
<PRE>
public void <B>error</B>(java.lang.String&nbsp;format,
                  java.lang.Object&nbsp;arg1,
                  java.lang.Object&nbsp;arg2)</PRE>
<DL>
<DD>Perform double parameter substitution before logging the message of level
 ERROR according to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>arg1</CODE> - the first argument<DD><CODE>arg2</CODE> - the second argument</DL>
</DD>
</DL>
<HR>

<A NAME="error(java.lang.String, java.lang.Object[])"><!-- --></A><H3>
error</H3>
<PRE>
public void <B>error</B>(java.lang.String&nbsp;format,
                  java.lang.Object[]&nbsp;argArray)</PRE>
<DL>
<DD>Perform double parameter substitution before logging the message of level
 ERROR according to the format outlined above.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>format</CODE> - the format string<DD><CODE>argArray</CODE> - an array of arguments</DL>
</DD>
</DL>
<HR>

<A NAME="error(java.lang.String, java.lang.Throwable)"><!-- --></A><H3>
error</H3>
<PRE>
public void <B>error</B>(java.lang.String&nbsp;msg,
                  java.lang.Throwable&nbsp;t)</PRE>
<DL>
<DD>Log a message of level ERROR, including an exception.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>msg</CODE> - the message accompanying the exception<DD><CODE>t</CODE> - the exception (throwable) to log</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>

<!-- ========== START OF NAVBAR ========== -->
<A NAME="navbar_bottom"><!-- --></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0">
<TR>
<TD COLSPAN=3 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/SimpleLogger.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>

      	   Copyright 2004-2006 SLF4J.ORG, QOS.ch
      	</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/slf4j/impl/NOPLoggerFactory.html"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/slf4j/impl/SimpleLoggerFactory.html"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html" TARGET="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="SimpleLogger.html" TARGET="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;
<SCRIPT>
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
<A HREF="../../../allclasses-noframe.html" TARGET=""><B>All Classes</B></A>
</NOSCRIPT>
</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<!-- =========== END OF NAVBAR =========== -->

<HR>

    		
    	
</BODY>
</HTML>
